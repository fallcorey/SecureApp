package com.company.secureapp

import android.content.Intent
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.telephony.SmsManager
import android.util.Log
import android.widget.Button
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import android.Manifest
import android.content.pm.PackageManager

class MainActivity : AppCompatActivity() {

    private val TAG = "SecureAppDebug"
    private lateinit var preferenceHelper: SimplePreferenceHelper
    private lateinit var audioRecorder: AudioRecorderHelper
    private val SMS_PERMISSION_CODE = 1001
    private val handler = Handler(Looper.getMainLooper())
    private var recordingRunnable: Runnable? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        try {
            preferenceHelper = SimplePreferenceHelper(this)
            audioRecorder = AudioRecorderHelper(this)
            setContentView(R.layout.activity_main)

            val sosButton = findViewById<Button>(R.id.sos_button)
            val settingsButton = findViewById<Button>(R.id.settings_button)

            sosButton.setOnClickListener {
                if (checkAllPermissions()) {
                    startEmergencyProcedure()
                } else {
                    requestPermissions()
                }
            }

            settingsButton.setOnClickListener {
                val intent = Intent(this, SettingsActivity::class.java)
                startActivity(intent)
            }

        } catch (e: Exception) {
            Toast.makeText(this, "App error: ${e.message}", Toast.LENGTH_LONG).show()
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    private fun checkAllPermissions(): Boolean {
        return checkSmsPermission() && checkAudioPermission()
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É SMS
    private fun checkSmsPermission(): Boolean {
        return ActivityCompat.checkSelfPermission(
            this,
            Manifest.permission.SEND_SMS
        ) == PackageManager.PERMISSION_GRANTED
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∑–∞–ø–∏—Å—å audio
    private fun checkAudioPermission(): Boolean {
        return ActivityCompat.checkSelfPermission(
            this,
            Manifest.permission.RECORD_AUDIO
        ) == PackageManager.PERMISSION_GRANTED
    }

    // –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    private fun requestPermissions() {
        val permissionsToRequest = mutableListOf<String>()
        
        if (!checkSmsPermission()) {
            permissionsToRequest.add(Manifest.permission.SEND_SMS)
        }
        
        if (!checkAudioPermission()) {
            permissionsToRequest.add(Manifest.permission.RECORD_AUDIO)
        }
        
        if (permissionsToRequest.isNotEmpty()) {
            ActivityCompat.requestPermissions(
                this,
                permissionsToRequest.toTypedArray(),
                SMS_PERMISSION_CODE
            )
        }
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
    private fun startEmergencyProcedure() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            val savedSmsNumber = preferenceHelper.getString("sms_number", "")
            if (savedSmsNumber.isBlank() || !savedSmsNumber.startsWith("+")) {
                Toast.makeText(this, 
                    "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +79123456789 –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö", 
                    Toast.LENGTH_LONG).show()
                return
            }

            // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –∑–≤—É–∫–∞
            if (audioRecorder.startRecording()) {
                val recordingsPath = audioRecorder.getRecordingsDirectory()
                Toast.makeText(this, 
                    "üé§ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞ (5 –º–∏–Ω—É—Ç)\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤: $recordingsPath", 
                    Toast.LENGTH_LONG).show()
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
                startRecordingTimer()
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS
            val savedUserName = preferenceHelper.getString("user_name", "User")
            val message = "üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –æ—Ç $savedUserName! " +
                         "–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å! " +
                         "–ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å —Å–∏—Ç—É–∞—Ü–∏–∏ –≤–µ–¥–µ—Ç—Å—è."
            
            val smsManager = SmsManager.getDefault()
            smsManager.sendTextMessage(savedSmsNumber, null, message, null, null)
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
            handler.postDelayed({
                stopEmergencyProcedure()
            }, 5 * 60 * 1000) // 5 –º–∏–Ω—É—Ç
            
            Toast.makeText(this, 
                "‚úÖ SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞: $savedSmsNumber\n" +
                "üé§ –ò–¥–µ—Ç –∑–∞–ø–∏—Å—å (5 –º–∏–Ω—É—Ç)...", 
                Toast.LENGTH_LONG).show()
            
        } catch (e: Exception) {
            Toast.makeText(this, "‚ùå –û—à–∏–±–∫–∞: ${e.message}", Toast.LENGTH_LONG).show()
        }
    }

    // –¢–∞–π–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
    private fun startRecordingTimer() {
        recordingRunnable = object : Runnable {
            override fun run() {
                if (audioRecorder.isRecording()) {
                    val remainingTime = audioRecorder.getRemainingTime()
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                    if (remainingTime % 30 == 0L && remainingTime > 0) {
                        Toast.makeText(this@MainActivity, 
                            "üé§ –ó–∞–ø–∏—Å—å –∏–¥–µ—Ç... –û—Å—Ç–∞–ª–æ—Å—å: ${remainingTime} —Å–µ–∫", 
                            Toast.LENGTH_SHORT).show()
                    }
                    
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                    handler.postDelayed(this, 1000)
                }
            }
        }
        recordingRunnable?.let { handler.post(it) }
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
    private fun stopEmergencyProcedure() {
        audioRecorder.stopRecording()
        recordingRunnable?.let { handler.removeCallbacks(it) }
        
        val filePath = audioRecorder.getRecordedFilePath()
        Toast.makeText(this, 
            "‚èπÔ∏è –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞\nüíæ –§–∞–π–ª: $filePath", 
            Toast.LENGTH_LONG).show()
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        
        if (requestCode == SMS_PERMISSION_CODE) {
            var allGranted = true
            
            for (i in grantResults.indices) {
                if (grantResults[i] != PackageManager.PERMISSION_GRANTED) {
                    allGranted = false
                    Toast.makeText(this, "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ denied: ${permissions[i]}", Toast.LENGTH_LONG).show()
                }
            }
            
            if (allGranted) {
                startEmergencyProcedure()
            }
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        stopEmergencyProcedure()
        recordingRunnable?.let { handler.removeCallbacks(it) }
    }
}
