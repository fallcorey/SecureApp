package com.company.secureapp

import android.content.Intent
import android.content.SharedPreferences
import android.content.res.Resources
import android.os.Bundle
import android.view.View
import android.widget.AdapterView
import android.widget.ArrayAdapter
import android.widget.Button
import android.widget.EditText
import android.widget.Spinner
import java.util.*

class SettingsActivity : BaseActivity() {

    private lateinit var preferenceHelper: SimplePreferenceHelper
    private lateinit var sharedPreferences: SharedPreferences
    private lateinit var languageSpinner: Spinner
    private lateinit var recordingTimeSpinner: Spinner
    private var currentLanguage: String = "en"

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_settings)

        preferenceHelper = SimplePreferenceHelper(this)
        sharedPreferences = getSharedPreferences("AppPreferences", MODE_PRIVATE)

        val saveButton = findViewById<Button>(R.id.save_button)
        languageSpinner = findViewById<Spinner>(R.id.language_spinner)
        recordingTimeSpinner = findViewById<Spinner>(R.id.recording_time_spinner)
        val serverUrl = findViewById<EditText>(R.id.server_url)
        val serverAuthToken = findViewById<EditText>(R.id.server_auth_token)
        val smsNumber = findViewById<EditText>(R.id.sms_number)
        val userName = findViewById<EditText>(R.id.user_full_name)
        val userPhone = findViewById<EditText>(R.id.user_phone_number)

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Spinner'—ã
        setupLanguageSpinner()
        setupRecordingTimeSpinner()

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        loadSavedSettings(serverUrl, serverAuthToken, smsNumber, userName, userPhone)

        // üî¥ –ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –°–ú–ï–ù–ê –Ø–ó–´–ö–ê –ü–†–ò –í–´–ë–û–†–ï
        languageSpinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
            override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {
                val selectedLanguage = when (position) {
                    0 -> "en"
                    1 -> "ru"
                    2 -> "es"
                    3 -> "fr"
                    else -> "en"
                }
                
                if (selectedLanguage != currentLanguage) {
                    currentLanguage = selectedLanguage
                    // üî¥ –ú–ï–ù–Ø–ï–ú –Ø–ó–´–ö –°–†–ê–ó–£ –ü–†–ò –í–´–ë–û–†–ï
                    changeLanguageImmediately(selectedLanguage)
                }
            }

            override fun onNothingSelected(parent: AdapterView<*>?) {}
        }

        saveButton.setOnClickListener {
            saveSettings(serverUrl, serverAuthToken, smsNumber, userName, userPhone)
        }
    }

    private fun loadSavedSettings(
        serverUrl: EditText, serverAuthToken: EditText, 
        smsNumber: EditText, userName: EditText, userPhone: EditText
    ) {
        serverUrl.setText(preferenceHelper.getString("server_url", ""))
        serverAuthToken.setText(preferenceHelper.getString("server_auth_token", ""))
        smsNumber.setText(preferenceHelper.getString("sms_number", ""))
        userName.setText(preferenceHelper.getString("user_name", ""))
        userPhone.setText(preferenceHelper.getString("user_phone", ""))

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫
        currentLanguage = sharedPreferences.getString("selected_language", "en") ?: "en"
        val languagePosition = when (currentLanguage) {
            "en" -> 0
            "ru" -> 1
            "es" -> 2
            "fr" -> 3
            else -> 0
        }
        languageSpinner.setSelection(languagePosition)

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏
        val savedRecordingTime = preferenceHelper.getString("recording_time", "30000")
        val recordingTimeValues = resources.getStringArray(R.array.recording_time_values)
        val recordingTimePosition = recordingTimeValues.indexOf(savedRecordingTime).coerceAtLeast(0)
        recordingTimeSpinner.setSelection(recordingTimePosition)
    }

    private fun saveSettings(
        serverUrl: EditText, serverAuthToken: EditText, 
        smsNumber: EditText, userName: EditText, userPhone: EditText
    ) {
        val serverUrlText = serverUrl.text.toString().trim()
        val serverAuthTokenText = serverAuthToken.text.toString().trim()
        val smsNumberText = smsNumber.text.toString().trim()
        val userNameText = userName.text.toString().trim()
        val userPhoneText = userPhone.text.toString().trim()

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if (smsNumberText.isNotBlank() && !smsNumberText.startsWith("+")) {
            showToast("Phone number must start with '+' (format: +79123456789)")
            return
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–∫–∞–∑–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
        if (smsNumberText.isBlank() && serverUrlText.isBlank()) {
            showToast("Please set at least one alert method: SMS number or Server URL")
            return
        }

        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            preferenceHelper.saveString("server_url", serverUrlText)
            preferenceHelper.saveString("server_auth_token", serverAuthTokenText)
            preferenceHelper.saveString("sms_number", smsNumberText)
            preferenceHelper.saveString("user_name", userNameText)
            preferenceHelper.saveString("user_phone", userPhoneText)

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏
            val recordingTimeValues = resources.getStringArray(R.array.recording_time_values)
            val selectedRecordingTime = recordingTimeValues[recordingTimeSpinner.selectedItemPosition]
            preferenceHelper.saveString("recording_time", selectedRecordingTime)

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
            sharedPreferences.edit().putString("selected_language", currentLanguage).apply()

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ
            val recordingTime = selectedRecordingTime.toLongOrNull() ?: 30000
            val audioStatusMessage = if (recordingTime == 0L) {
                "Audio recording DISABLED (0 seconds)"
            } else {
                "Audio recording: ${recordingTime / 1000} seconds"
            }

            showToast("Settings saved! $audioStatusMessage")
            finish()
            
        } catch (e: Exception) {
            showToast("Save error: ${e.message}")
        }
    }

    // üî¥ –ù–û–í–´–ô –ú–ï–¢–û–î: –ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –°–ú–ï–ù–ê –Ø–ó–´–ö–ê
    private fun changeLanguageImmediately(languageCode: String) {
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            sharedPreferences.edit().putString("selected_language", languageCode).apply()
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            updateActivityLanguage(languageCode)
            
            showToast("Language changed to: ${getLanguageName(languageCode)}")
            
        } catch (e: Exception) {
            Log.e("SettingsActivity", "Error changing language: ${e.message}")
            showToast("Error changing language")
        }
    }

    // üî¥ –û–ë–ù–û–í–õ–Ø–ï–ú –Ø–ó–´–ö –¢–ï–ö–£–©–ï–ô –ê–ö–¢–ò–í–ù–û–°–¢–ò
    private fun updateActivityLanguage(languageCode: String) {
        val locale = Locale(languageCode)
        Locale.setDefault(locale)
        
        val resources = resources
        val configuration = resources.configuration
        configuration.setLocale(locale)
        
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {
            createConfigurationContext(configuration)
        }
        
        resources.updateConfiguration(configuration, resources.displayMetrics)
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã —Å –Ω–æ–≤—ã–º —è–∑—ã–∫–æ–º
        reloadUIWithNewLanguage()
    }

    // üî¥ –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê UI –≠–õ–ï–ú–ï–ù–¢–û–í
    private fun reloadUIWithNewLanguage() {
        val saveButton = findViewById<Button>(R.id.save_button)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        saveButton.text = getString(R.string.save_settings)
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        // val titleTextView = findViewById<TextView>(R.id.title_text) // –µ—Å–ª–∏ –µ—Å—Ç—å
        // titleTextView.text = getString(R.string.settings_title)
    }

    private fun getLanguageName(languageCode: String): String {
        return when (languageCode) {
            "en" -> "English"
            "ru" -> "Russian"
            "es" -> "Spanish"
            "fr" -> "French"
            else -> "English"
        }
    }

    private fun setupLanguageSpinner() {
        val adapter = ArrayAdapter.createFromResource(
            this,
            R.array.languages_array,
            android.R.layout.simple_spinner_item
        )
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
        languageSpinner.adapter = adapter
    }

    private fun setupRecordingTimeSpinner() {
        val adapter = ArrayAdapter.createFromResource(
            this,
            R.array.recording_time_array,
            android.R.layout.simple_spinner_item
        )
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
        recordingTimeSpinner.adapter = adapter
    }

    override fun onBackPressed() {
        // –ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∞–∫—Ç–∏–≤–∏—Ç–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è —Å –Ω–æ–≤—ã–º —è–∑—ã–∫–æ–º
        super.onBackPressed()
    }
}
